<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.1" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_3_1.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
<!-- 	root-context : 스프링 설정/ servlet-context : 스프링 웹 설정 / web.xml : 톰캣설정 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml
		/WEB-INF/spring/security-context.xml
		</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		
<!-- 		404 에러를 처리할 수 있도록 throwExceptionIfNoHandlerFound속성을 true로 설정 -->
		<init-param>
			<param-name>throwExceptionIfNoHandlerFound</param-name>
			<param-value>true</param-value>
		</init-param>
		
		<load-on-startup>1</load-on-startup>
		
<!-- 		web.xml 의 설정은  Was(Tomcat) 자체 설정을 진행 -->
<!-- 		multipart-config : 메모리 사이즈,업로드 파일 저장 위치 , 최대크기 설정 -->
		
<!-- 		아래에 설정한 내용을 가지고 @multipartConfig 어노테이션을 활용하면 아래에서 설정한 세팅값으로 파일 업로드 가능 -->
		
		<multipart-config>
			<location>c:\\uploadFileFinal1.0</location>  <!--  업로드 파일 저장공간 --> 
			<max-file-size>20971520</max-file-size> <!-- 파일 최대크기 -->
			<max-request-size>41943040</max-request-size> <!-- 한번에 올릴 수 있는 최대크기 -->
			<file-size-threshold>20971520</file-size-threshold>
			<!-- 메모리 사용 크기 20mb 
				임시로 파일 저장이 아니라 메모리에서 바로 스트림으로 전달
			-->
		</multipart-config>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	
<!-- 	한글처리를 위한 필터등록  -->
<!-- 	JSP나 서블릿 처리할 때마다 넘겨받은 request를 setCharaterEncoding으로 utf-8 설정했던 사항을 필터로 대체함 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
<!-- 	MultipartFilter cross site scripting을 위한 설정-->
	<filter>
		<filter-name>MultipartFilter</filter-name>
		<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>MultipartFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
<!-- 토큰값 전송을 위해 springMultipartFilter 등록 -->	
	<filter>
		<filter-name>springMultipartFilter</filter-name>
		<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springMultipartFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


<!-- 	서블릿 필터 클래스를 서블릿 컨테이너에 등록함 -->
		<filter>
			<filter-name>springSecurityFilterChain</filter-name>
			<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>springSecurityFilterChain</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>
		
<!-- 	세션시간 60분으로 설정함 -->
		<session-config>
		    <session-timeout>60</session-timeout>
		</session-config>
</web-app>














